swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Chat-Room"
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
# tags
tags:
  - name: "message"
    description: "Messages"
  - name: "conversation"
    description: "Conversations"
  - name: "user"
    description: "Operations about user"
paths:
  /hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /message:
    post:
      tags:
        - "message"
      summary: "Add a new message to the conversation"
      description: ""
      operationId: "addMessage"
      parameters:
        - in: "body"
          name: "body"
          description: "Message object that needs to be added to the conversation"
          required: true
          schema:
            $ref: "#/definitions/Message"
      responses:
        405:
          description: "Invalid input"
      security: []
    put:
      tags:
        - "message"
      summary: "Update an existing message"
      description: ""
      operationId: "updateMessage"
      parameters:
        - in: "body"
          name: "body"
          description: "Message object that needs to be updated to the conversation"
          required: true
          schema:
            $ref: "#/definitions/Message"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
        405:
          description: "Validation exception"
      security: []
  /message/{messageId}:
    get:
      tags:
        - "message"
      summary: "Find message by ID"
      description: "Returns a single message"
      operationId: "getMessageById"
      parameters:
        - name: "messageId"
          in: "path"
          description: "Id of message to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      security: []
    delete:
      tags:
        - "message"
      summary: "Deletes a message"
      description: ""
      operationId: "deleteMessage"
      parameters:
        - name: "messageId"
          in: "path"
          description: "Message id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      security: []
  /conversation:
    get:
      tags:
        - "conversation"
      summary: "Get conversations"
      description: "Returns all conversations"
      operationId: "getConversations"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Conversations"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      security: []
    post:
      tags:
        - "conversation"
      summary: "Add a new conversation"
      description: ""
      operationId: "addConversation"
      parameters:
        - in: "body"
          name: "body"
          description: "Conversation object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Conversation"
      responses:
        405:
          description: "Invalid input"
      security: []
    put:
      tags:
        - "conversation"
      summary: "Update an existing conversation"
      description: ""
      operationId: "updateConversation"
      parameters:
        - in: "body"
          name: "body"
          description: "Conversation object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Conversation"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Conversation not found"
        405:
          description: "Validation exception"
      security: []
  /conversation/{conversationId}:
    get:
      tags:
        - "conversation"
      summary: "Find conversation by ID"
      description: "Returns a single conversation"
      operationId: "getConversationById"
      parameters:
        - name: "conversationId"
          in: "path"
          description: "Id of conversation to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Conversation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      security: []
    delete:
      tags:
        - "conversation"
      summary: "Deletes a conversation"
      description: ""
      operationId: "deleteConversation"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "conversationId"
          in: "path"
          description: "Conversation id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Message not found"
      security: []
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  Message:
    type: "object"
    properties:
      messageId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      content:
        type: "string"
      sentDate:
        type: "string"
        format: "date-time"
  Conversation:
    type: "object"
    properties:
      conversationId:
        type: "integer"
        format: "int64"
      userIds:
        type: "array"
        items:
          type: "integer"
          format: "int64"
  Conversations:
    properties:
      conversations:
        type: array
        items:
          $ref: '#/definitions/Conversation'
  User:
    type: "object"
    required:
      - "username"
    properties:
      userId:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      isDoctor:
        type: "boolean"
        default: false
      age:
        type: "integer"
        format: "int32"
      blood:
        type: "string"
      userStatus:
        type: "string"
        description: "User Status"
        enum:
          - "online"
          - "offline"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
