{
  "swagger": "2.0",
  "info": {
    "description": "This is a chat-room server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
    "version": "1.0.0",
    "title": "Swagger Chat-Room",
    "contact": {
      "email": "javier.villarreal@live.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "chat-room.azurewebsites.net",
  "basePath": "/",
  "tags": [
    {
      "name": "message",
      "description": "Messages"
    },
    {
      "name": "conversation",
      "description": "Conversations"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/message": {
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Add a new message to the conversation",
        "description": "",
        "operationId": "addMessage",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Message object that needs to be added to the conversation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": []
      },
      "put": {
        "tags": [
          "message"
        ],
        "summary": "Update an existing message",
        "description": "",
        "operationId": "updateMessage",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Message object that needs to be updated to the conversation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Message not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": []
      }
    },
    "/message/{messageId}": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Find message by ID",
        "description": "Returns a single message",
        "operationId": "getMessageById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Id of message to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Message not found"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
          "message"
        ],
        "summary": "Deletes a message",
        "description": "",
        "operationId": "deleteMessage",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Message not found"
          }
        },
        "security": []
      }
    },
    "/conversation": {
      "post": {
        "tags": [
          "conversation"
        ],
        "summary": "Add a new conversation",
        "description": "",
        "operationId": "addConversation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Conversation object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Conversation"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": []
      },
      "put": {
        "tags": [
          "conversation"
        ],
        "summary": "Update an existing conversation",
        "description": "",
        "operationId": "updateConversation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Conversation object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Conversation"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Conversation not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": []
      }
    },
    "/conversation/{conversationId}": {
      "get": {
        "tags": [
          "conversation"
        ],
        "summary": "Find conversation by ID",
        "description": "Returns a single conversation",
        "operationId": "getConversationById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Id of conversation to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Conversation"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Message not found"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
          "conversation"
        ],
        "summary": "Deletes a conversation",
        "description": "",
        "operationId": "deleteConversation",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Message not found"
          }
        },
        "security": []
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Message": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "string"
        },
        "sentDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Conversation": {
      "type": "object",
      "properties": {
        "conversationId": {
          "type": "integer",
          "format": "int64"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "isDoctor": {
          "type": "boolean",
          "default": false
        },
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "blood": {
          "type": "string"
        },
        "userStatus": {
          "type": "string",
          "description": "User Status",
          "enum": [
            "online",
            "offline"
          ]
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}